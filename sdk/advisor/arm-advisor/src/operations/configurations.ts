/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { Configurations } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AdvisorManagementClient } from "../advisorManagementClient.js";
import {
  ConfigData,
  ConfigurationsListByResourceGroupOptionalParams,
  ConfigurationsListByResourceGroupResponse,
  ConfigurationName,
  ConfigurationsCreateInSubscriptionOptionalParams,
  ConfigurationsCreateInSubscriptionResponse,
  ConfigurationsCreateInResourceGroupOptionalParams,
  ConfigurationsCreateInResourceGroupResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing Configurations operations. */
export class ConfigurationsImpl implements Configurations {
  private readonly client: AdvisorManagementClient;

  /**
   * Initialize a new instance of the class Configurations class.
   * @param client Reference to the service client
   */
  constructor(client: AdvisorManagementClient) {
    this.client = client;
  }

  /**
   * Retrieve Azure Advisor configurations.
   * @param resourceGroup The name of the Azure resource group.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroup: string,
    options?: ConfigurationsListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<ConfigData> {
    const iter = this.listByResourceGroupPagingAll(resourceGroup, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(resourceGroup, options, settings);
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroup: string,
    options?: ConfigurationsListByResourceGroupOptionalParams,
    _settings?: PageSettings,
  ): AsyncIterableIterator<ConfigData[]> {
    let result: ConfigurationsListByResourceGroupResponse;
    result = await this._listByResourceGroup(resourceGroup, options);
    yield result.value || [];
  }

  private async *listByResourceGroupPagingAll(
    resourceGroup: string,
    options?: ConfigurationsListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<ConfigData> {
    for await (const page of this.listByResourceGroupPagingPage(resourceGroup, options)) {
      yield* page;
    }
  }

  /**
   * Create/Overwrite Azure Advisor configuration and also delete all configurations of contained
   * resource groups.
   * @param configurationName Advisor configuration name. Value must be 'default'
   * @param configContract The Azure Advisor configuration data structure.
   * @param options The options parameters.
   */
  createInSubscription(
    configurationName: ConfigurationName,
    configContract: ConfigData,
    options?: ConfigurationsCreateInSubscriptionOptionalParams,
  ): Promise<ConfigurationsCreateInSubscriptionResponse> {
    return this.client.sendOperationRequest(
      { configurationName, configContract, options },
      createInSubscriptionOperationSpec,
    );
  }

  /**
   * Retrieve Azure Advisor configurations.
   * @param resourceGroup The name of the Azure resource group.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroup: string,
    options?: ConfigurationsListByResourceGroupOptionalParams,
  ): Promise<ConfigurationsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Create/Overwrite Azure Advisor configuration.
   * @param configurationName Advisor configuration name. Value must be 'default'
   * @param resourceGroup The name of the Azure resource group.
   * @param configContract The Azure Advisor configuration data structure.
   * @param options The options parameters.
   */
  createInResourceGroup(
    configurationName: ConfigurationName,
    resourceGroup: string,
    configContract: ConfigData,
    options?: ConfigurationsCreateInResourceGroupOptionalParams,
  ): Promise<ConfigurationsCreateInResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { configurationName, resourceGroup, configContract, options },
      createInResourceGroupOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createInSubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/configurations/{configurationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigData,
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse,
    },
  },
  requestBody: Parameters.configContract,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.configurationName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Advisor/configurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationListResult,
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.resourceGroup],
  headerParameters: [Parameters.accept],
  serializer,
};
const createInResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Advisor/configurations/{configurationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigData,
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse,
    },
  },
  requestBody: Parameters.configContract,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.configurationName,
    Parameters.resourceGroup,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
